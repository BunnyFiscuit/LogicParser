-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module LogicExpr.Par where
import LogicExpr.Abs
import LogicExpr.Lex
import LogicExpr.ErrM

}

%name pExpr Expr
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr3 Expr3
%name pStmt Stmt

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '&' { PT _ (TS _ 2) }
 '(' { PT _ (TS _ 3) }
 ')' { PT _ (TS _ 4) }
 '->' { PT _ (TS _ 5) }
 '=' { PT _ (TS _ 6) }
 'false' { PT _ (TS _ 7) }
 'true' { PT _ (TS _ 8) }
 '|' { PT _ (TS _ 9) }

L_ident  { PT _ (TV $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

Expr :: { Expr }
Expr : Expr '->' Expr { EImp $1 $3 } 
  | Expr1 { $1 }


Expr1 :: { Expr }
Expr1 : Expr '&' Expr { EAnd $1 $3 } 
  | Expr '|' Expr { EOr $1 $3 }
  | Expr2 { $1 }


Expr2 :: { Expr }
Expr2 : '!' Expr { ENot $2 } 
  | Expr3 { $1 }


Expr3 :: { Expr }
Expr3 : 'true' { ELitTrue } 
  | 'false' { ELitFalse }
  | Ident { EVar $1 }
  | '(' Expr ')' { $2 }


Stmt :: { Stmt }
Stmt : Ident '=' Expr { SAssign $1 $3 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

